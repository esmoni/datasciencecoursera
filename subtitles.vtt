WEBVTT

1
00:00:00.830 --> 00:00:02.050
本节课将介绍

2
00:00:02.050 --> 00:00:04.390
Git及Github的基本命令

3
00:00:04.390 --> 00:00:06.000
我们会在这节课上创建一些文档

4
00:00:06.000 --> 00:00:07.360
然后对它们应用这些命令

5
00:00:08.370 --> 00:00:10.830
我们要做的第一件事是看看文件结构是怎么样的

6
00:00:10.830 --> 00:00:14.600
以及不同的命令都有什么作用

7
00:00:14.600 --> 00:00:16.722
我们从workspace (工作区) 开始

8
00:00:16.722 --> 00:00:20.270
从这里操作电脑里的文件

9
00:00:20.270 --> 00:00:22.120
实际上这就是一个目录

10
00:00:22.120 --> 00:00:24.790
你在这个目录中对文件进行操作

11
00:00:24.790 --> 00:00:25.880
然后是索引

12
00:00:25.880 --> 00:00:27.630
这告诉Git哪些文件需要进行版本控制

13
00:00:27.630 --> 00:00:29.660
这告诉Git哪些文件需要进行版本控制

14
00:00:29.660 --> 00:00:32.650
接着还有本地资源库

15
00:00:32.650 --> 00:00:36.150
里面都是经过了版本控制的本地文件

16
00:00:36.150 --> 00:00:38.110
最后还有远程资源库

17
00:00:38.110 --> 00:00:39.520
在本课程中 我们会一直使用GitHub作为远程资源库

18
00:00:39.520 --> 00:00:43.260
那么 我们先从本地的workspace开始

19
00:00:43.260 --> 00:00:45.490
创建一个新文件

20
00:00:45.490 --> 00:00:48.450
首先要做的就是把文件加入到索引中

21
00:00:48.450 --> 00:00:54.000
这样Git才会去监测那个文件 并跟进它的所有变化

22
00:00:54.000 --> 00:00:56.530
然后你需要提交那个文件

23
00:00:56.530 --> 00:00:58.650
即把该文件的某个版本放入你的本地资源库

24
00:00:58.650 --> 00:01:01.925
这样它才能被保存和更新

25
00:01:01.925 --> 00:01:03.390
当你对文件做了修改时

26
00:01:03.390 --> 00:01:05.640
你需要不断把新版本提交到本地资源库中

27
00:01:07.030 --> 00:01:09.740
最后 在你提交过了几次代码

28
00:01:09.740 --> 00:01:12.930
当希望把它们更新到远程资源库时

29
00:01:12.930 --> 00:01:15.480
你则需要进行一次push (推送) 命令

30
00:01:15.480 --> 00:01:19.450
才能把所有的改动都更新到远程资源库

31
00:01:19.450 --> 00:01:20.420
那么 首先要做的就是

32
00:01:20.420 --> 00:01:22.322
假设你的工作目录

33
00:01:22.322 --> 00:01:28.440
正受到Git的版本控制

34
00:01:28.440 --> 00:01:32.180
所以你要做的第一件事就是把新文件纳入版本控制

35
00:01:32.180 --> 00:01:36.280
 也就是把它们添加到索引中

36
00:01:36.280 --> 00:01:38.220
这样Git就知道这些文件需要被检测

37
00:01:38.220 --> 00:01:40.280
你可以使用add (添加) 命令

38
00:01:41.463 --> 00:01:43.350
也就是“git add .”命令

39
00:01:43.350 --> 00:01:46.630
该命令会把所有新文件添加到你现在的工作目录

40
00:01:46.630 --> 00:01:50.130
使用这条命令的前提是你所在的目录就是你要添加文件的目录

41
00:01:52.994 --> 00:01:56.010
“git add -u”命令会更新那些被改了名或被删除的文件

42
00:01:56.010 --> 00:01:59.952
“git add -u”命令会更新那些被改了名或被删除的文件

43
00:01:59.952 --> 00:02:00.990
所以通过“git add .”命令

44
00:02:00.990 --> 00:02:04.590
只会添加新文件到索引 而“git add -u”命令则可以

45
00:02:04.590 --> 00:02:10.280
更新那些被删除的或被改名的文件

46
00:02:10.280 --> 00:02:16.180
“git add –A”命令则包含了上述两个命令的作用

47
00:02:16.180 --> 00:02:20.190
在你提交新内容到你的本地资源库之前

48
00:02:20.190 --> 00:02:23.660
确保你用的是add指令 这样才能将改动纳入到索引

49
00:02:25.210 --> 00:02:29.060
一旦添加进了索引 你就可以把它们提交到你的本地资源库

50
00:02:29.060 --> 00:02:31.910
你可以使用git commit指令

51
00:02:31.910 --> 00:02:37.470
使用“git commit –m”后面加上带引号的注释 来进行提交

52
00:02:37.470 --> 00:02:40.130
这里的注释

53
00:02:40.130 --> 00:02:42.390
最好是关于此次更改的相关描述

54
00:02:42.390 --> 00:02:44.210
好比 如果我是添加了新文件

55
00:02:44.210 --> 00:02:47.090
这里的注释就可以是 “我添加了以下文件”

56
00:02:47.090 --> 00:02:48.900
或者也可以对你删除更改过的文件做一点描述

57
00:02:48.900 --> 00:02:52.440
这样你就能相应更改本地资源库

58
00:02:53.448 --> 00:02:56.490
这只对本地资源库做出修改

59
00:02:56.490 --> 00:02:59.420
它仅仅是一个本地操作 不会更新到Github

60
00:03:00.570 --> 00:03:03.340
如果你想把修改更新到Github

61
00:03:03.340 --> 00:03:04.830
你可以在相同的工作目录下

62
00:03:04.830 --> 00:03:08.160
输入“git push”命令

63
00:03:08.160 --> 00:03:10.870
这个命令会把所有你提交的修改收集起来

64
00:03:10.870 --> 00:03:14.130
并推送到Github上的远程资源库

65
00:03:16.290 --> 00:03:17.540
有时你可能在做一个项目

66
00:03:17.540 --> 00:03:19.950
尤其是在这门课上

67
00:03:19.950 --> 00:03:23.630
可能会有很多人同时使用一个版本

68
00:03:23.630 --> 00:03:26.820
你不希望直接编辑那个被很多人同时使用的版本

69
00:03:26.820 --> 00:03:30.450
如果你对这个文件做了很多修改 可能会破坏别人的成果

70
00:03:30.450 --> 00:03:34.220
这时候你可以创建一个分支

71
00:03:34.220 --> 00:03:36.480
分支就是某个目录的一个复制品

72
00:03:36.480 --> 00:03:40.000
你可以在上面较为独立地进行修改

73
00:03:40.000 --> 00:03:44.170
做法就是输入“git checkout -b”命令

74
00:03:44.170 --> 00:03:47.860
再加上你要创建的分支的名字 然后就能创建一个新分支

75
00:03:47.860 --> 00:03:51.100
Github下创建的所有资源库的默认分支都是主分支

76
00:03:51.100 --> 00:03:53.060
但你可以创建其他分支做开发

77
00:03:53.060 --> 00:03:56.530
取什么名字都可以

78
00:03:56.530 --> 00:03:58.520
你可以在任何时候查看你在哪个分支上工作

79
00:03:58.520 --> 00:04:01.590
如果你进入到资源库的工作目录

80
00:04:01.590 --> 00:04:04.660
然后输入“git branch”命令 就能知道当前的分支名称

81
00:04:04.660 --> 00:04:08.100
如果你想切换回主分支

82
00:04:08.100 --> 00:04:10.540
你可以输入“git checkout master”命令

83
00:04:10.540 --> 00:04:12.220
然后你就能回到主分支

84
00:04:12.220 --> 00:04:13.640
这样你就能看到主分支的内容了

85
00:04:15.430 --> 00:04:17.120
当你准备做一个pull (拉拽) 请求

86
00:04:17.120 --> 00:04:20.280
或者把你的本地改动推送到远程资源库时

87
00:04:20.280 --> 00:04:23.830
假设你正在一个不同的分支上工作

88
00:04:23.830 --> 00:04:28.000
或者你正在一个从别人那里fork (复制) 来的资源库上工作

89
00:04:28.000 --> 00:04:30.990
你可能会想把你开发的东西合并到原始资源库里

90
00:04:30.990 --> 00:04:35.290
或是合并至原始分支

91
00:04:35.290 --> 00:04:37.650
要达到这个目的 你需要发布一个拉拽请求

92
00:04:37.650 --> 00:04:39.670
这是Github特有的功能

93
00:04:39.670 --> 00:04:41.770
Git则没有这项功能

94
00:04:41.770 --> 00:04:43.790
你要做的是先到Github网站

95
00:04:43.790 --> 00:04:47.550
进入你感兴趣的分支

96
00:04:47.550 --> 00:04:52.160
再选择并进入了分支之后

97
00:04:52.160 --> 00:04:54.010
你只需要点击

98
00:04:54.010 --> 00:04:57.390
这个compare & pull request (比较及拉拽请求) 的按键

99
00:04:57.390 --> 00:04:59.150
它会向拥有那些分支或资源库的个人

100
00:04:59.150 --> 00:05:03.010
发送一个拉拽请求

101
00:05:03.010 --> 00:05:04.960
如果你本人就是拥有者

102
00:05:04.960 --> 00:05:07.350
你将收到一个拉拽请求的提醒

103
00:05:07.350 --> 00:05:09.610
如果是别人的 那他们就会收到提醒

104
00:05:09.610 --> 00:05:12.760
如果他们认为修改是合理的 就会决定

105
00:05:12.760 --> 00:05:15.550
把你的请求整合到他们的资源库

106
00:05:15.550 --> 00:05:17.950
然后你就可以看到所有的修改

107
00:05:17.950 --> 00:05:21.040
并确认它们是否合适有用

108
00:05:22.760 --> 00:05:24.760
我刚才教了你们一些非常基础的Github命令

109
00:05:24.760 --> 00:05:27.280
但实际上还有很多其他命令

110
00:05:27.280 --> 00:05:31.110
在使用Git和Github时 可能经常会碰到一些小问题

111
00:05:31.110 --> 00:05:35.610
最好的解决办法是Github help

112
00:05:35.610 --> 00:05:38.230
还有Git的介绍文件实际上也相当详尽

113
00:05:38.230 --> 00:05:40.670
它需要你多花一点时间去阅读和实践

114
00:05:40.670 --> 00:05:43.210
当然根据我的经验

115
00:05:43.210 --> 00:05:45.270
解决问题最好的办法

116
00:05:45.270 --> 00:05:48.850
是在Google或Stack Overflow输入你的问题

117
00:05:48.850 --> 00:05:52.050
这样你很快就能找到答案【教育无边界字幕组】sophiezzy | hazard1990 | LennyBear